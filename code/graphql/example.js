const { Neo4jGraphQL } = require("@neo4j/graphql");
const { ApolloServer } = require("apollo-server");
const neo4j = require("neo4j-driver");

const driver = neo4j.driver(
  "bolt://<HOST>:<BOLTPORT>",
  neo4j.auth.basic("<USERNAME>", "<PASSWORD>")
);

const typeDefs = /* GraphQL */ `
  type Entity {
    address: String
    closed_date: String
    company_type: String
    countries: String
    country_codes: String
    ibcRUC: String
    incorporation_date: String
    jurisdiction: String!
    jurisdiction_description: String!
    name: String!
    node_id: String!
    note: String
    service_provider: String
    sourceID: String!
    status: String
    type: String
    valid_until: String!
    registered_address: [Address]
      @relationship(type: "REGISTERED_ADDRESS", direction: OUT)
    officers: [Officer] @relationship(type: "OFFICER_OF", direction: IN)
    others: [Other] @relationship(type: "INTERMEDIARY_OF", direction: IN)
  }

  type Other {
    countries: String
    country_codes: String
    jurisdiction: String
    jurisdiction_description: String
    name: String!
    node_id: String!
    note: String
    sourceID: String!
    status: String
    valid_until: String!
    intermediary_of: [Entity]
      @relationship(type: "INTERMEDIARY_OF", direction: OUT)
    same_name_as: [Entity] @relationship(type: "SAME_NAME_AS", direction: OUT)
  }

  type Intermediary {
    countries: String
    country_codes: String
    name: String!
    node_id: String!
    sourceID: String!
    valid_until: String!
    connected_to: [Entity] @relationship(type: "CONNECTED_TO", direction: OUT)
    same_name_as: [Entity] @relationship(type: "SAME_NAME_AS", direction: OUT)
  }

  type Officer {
    countries: String
    country_codes: String
    name: String!
    node_id: String!
    note: String
    sourceID: String!
    valid_until: String!
    registered_address: [Address]
      @relationship(type: "REGISTERED_ADDRESS", direction: OUT)
    officer_of: [Entity] @relationship(type: "OFFICER_OF", direction: OUT)
    connected_to: [Entity] @relationship(type: "CONNECTED_TO", direction: OUT)
    same_name_as: [Entity] @relationship(type: "SAME_NAME_AS", direction: OUT)
    same_id_as: [Officer] @relationship(type: "SAME_ID_AS", direction: OUT)
    num_of_connected_entities: Int
      @cypher(
        statement: """
        MATCH (this)--(e:Entity)
        RETURN COUNT(e)
        """
      )
  }

  type Address {
    address: String!
    countries: String
    country_codes: String
    name: String!
    node_id: String!
    sourceID: String!
    valid_until: String!
    officers: [Officer] @relationship(type: "REGISTERED_ADDRESS", direction: IN)
    entities: [Entity] @relationship(type: "REGISTERED_ADDRESS", direction: IN)
  }
`;

// Create executable GraphQL schema from GraphQL type definitions,
// using @neo4j/graphql to autogenerate resolvers
const neoSchema = new Neo4jGraphQL({
  typeDefs,
  debug: true,
});

// Create ApolloServer instance that will serve GraphQL schema created above
// Inject Neo4j driver instance into the context object, which will be passed
//  into each (autogenerated) resolver
const server = new ApolloServer({
  context: { driver },
  schema: neoSchema.schema,
  introspection: true,
  playground: true,
});

// Start ApolloServer
server.listen().then(({ url }) => {
  console.log(`GraphQL server ready at ${url}`);
});
